name: "Upload cache asset to release"
description: "Upload a build cache asset to a release"
inputs:
  name:
    description: "Artifact name"
    required: true
  path:
    description: "Path of file to upload"
    required: true
  token:
    description: "GitHub token"
    required: false
    default: ${{ github.token }}
  repo:
    description: "Repository name with owner (like actions/checkout)"
    required: false
    default: ${{ github.repository }}
  release-tag:
    description: "Tag of release to check artifacts under"
    required: false
    default: "v0.10.0-alpha.7"
runs:
  using: "composite"
  steps:
    - run: |
        set -xe

        asset_name="${{ inputs.name }}"
        filename="${{ inputs.path }}"

        # Check input
        if [[ ! -f "${filename}" ]]; then
          echo "Error: Input file (${filename}) missing"
          exit 1;
        fi

        AUTH="Authorization: token ${{ inputs.token }}"

        owner=$(echo "${{inputs.repo}}" | cut -f1 -d/)
        repo=$(echo "${{inputs.repo}}" | cut -f2 -d/)
        tag="${{ inputs.release-tag }}"

        GH_REPO="https://api.github.com/repos/${owner}/${repo}"

        # Check token
        curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

        # Get ID of the release based on given tag name
        GH_TAGS="${GH_REPO}/releases/tags/${tag}"
        response=$(curl -sH "$AUTH" $GH_TAGS)
        eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
        [ "$id" ] || { echo "Error: Failed to get release id for tag: $tag"; echo "$response" | awk 'length($0)<100' >&2; exit 1; }

        # Upload asset
        echo "Uploading asset..."
        GH_ASSET="https://uploads.github.com/repos/${owner}/${repo}/releases/${id}/assets?name=${asset_name}"
        curl -T "${filename}" -X POST -H "${AUTH}" -H "Content-Type: application/octet-stream" $GH_ASSET
      shell: bash
