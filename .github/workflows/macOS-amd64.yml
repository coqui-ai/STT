name: "macOS amd64"
on:
  pull_request:
  push:
    branches:
      - master
env:
  TASKCLUSTER_TASK_DIR: ${{ github.workspace }}
  TASKCLUSTER_ARTIFACTS: ${{ github.workspace }}/artifacts
  MACOSX_DEPLOYMENT_TARGET: "10.10"
jobs:
  swig_macOS:
    name: "Build SWIG for macOS"
    runs-on: macos-10.15
    env:
      swig_hash: "90cdbee6a69d13b39d734083b9f91069533b0d7b"
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "swig/swig"
          ref: ${{ env.swig_hash }}
      - run: |
          mkdir -p build-static/
      - uses: actions/cache@v2
        id: swig-build-cache
        with:
          path: build-static/
          key: swig-${{ runner.os }}-${{ env.swig_hash }}
      - run: |
          brew install automake
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          curl -sSL https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz > pcre-8.43.tar.gz
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          ./Tools/pcre-build.sh
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          sh autogen.sh
          ./configure \
            --prefix=${{ github.workspace }}/build-static/ \
            --program-prefix=ds-
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          make -j
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          make install
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: ${{ github.workspace }}/build-static/
  build-ctc-decoder:
    name: "Build CTC decoder Python package for testing"
    needs: [ swig_macOS ]
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: [3.6.8]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/install-python-upstream
        with:
          version: ${{ matrix.python-version }}
      - run: |
          python --version
          pip --version
      - uses: actions/download-artifact@v2
        with:
          name: "swig_macOS"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: ${{ matrix.python-version }}
      - run: |
          NUMPY_BUILD_VERSION=${{ steps.get_numpy.outputs.build_version }} \
          NUMPY_DEP_VERSION=${{ steps.get_numpy.outputs.dep_version }} \
          make -C native_client/ctcdecode/ \
            NUM_PROCESSES=$(sysctl hw.ncpu |cut -d' ' -f2) \
            bindings
      - uses: actions/upload-artifact@v2
        with:
          name: "ds_ctcdecoder-test.whl"
          path: ${{ github.workspace }}/native_client/ctcdecode/dist/*.whl
      - run: |
          make -C native_client/ctcdecode clean-keep-third-party
  train-test-model:
    name: "Train a test model"
    needs: [ "build-ctc-decoder" ]
    runs-on: macos-10.15
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        bitrate: ["8k", "16k"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - uses: actions/download-artifact@v2
        with:
          name: "ds_ctcdecoder-test.whl"
      - run: |
          python --version
          pip --version
      - run: |
          pip install --upgrade pip==19.3.1 setuptools==45.0.0 wheel==0.33.6
      - run: |
          pip install ds_ctcdecoder-*-cp36-cp36m-*_x86_64.whl
          DS_NODECODER=y pip install --upgrade .
      - run: |
          bits=""
          if [ "${{ matrix.bitrate }}" = "8k" ]; then
            bits=8000
          fi
          if [ "${{ matrix.bitrate }}" = "16k"  ]; then
            bits=16000
          fi

          # Easier to rename to that we can exercize the LDC93S1 importer code to
          # generate the CSV file.
          echo "Moving ${bits} to LDC93S1.wav"
          mv data/smoke_test/LDC93S1_pcms16le_1_${bits}.wav data/smoke_test/LDC93S1.wav

          ./bin/run-tc-ldc93s1_new.sh 249 ${bits}
          ./bin/run-tc-ldc93s1_tflite.sh ${bits}
      - run: |
          curl -vsSL https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/macOS.amd64.convert_graphdef_memmapped_format.xz | xz -d > /tmp/convert_graphdef_memmapped_format
          chmod +x /tmp/convert_graphdef_memmapped_format
          /tmp/convert_graphdef_memmapped_format --in_graph=/tmp/train/output_graph.pb --out_graph=/tmp/train/output_graph.pbmm
      - run: |
          tar -cf - \
            -C /tmp/ckpt/ . \
            | xz -9 -T0 > /tmp/checkpoint.tar.xz
      - run: |
          mkdir -p ${{ github.workspace }}/tmp/
          cp /tmp/train*/output_graph.* /tmp/checkpoint.tar.xz ${{ github.workspace }}/tmp/
      - run: |
          ls -hal /tmp/ ${{ github.workspace }}/tmp/
      - uses: actions/upload-artifact@v2
        with:
          name: "test-model.tf-${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/output_graph.pb*
      - uses: actions/upload-artifact@v2
        with:
          name: "test-model.tflite-${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/output_graph.tflite
      - uses: actions/upload-artifact@v2
        with:
          name: "test-checkpoint.${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/checkpoint.tar.xz
  tensorflow_opt-macOS:
    name: "Check cache for TensorFlow"
    runs-on: ubuntu-20.04
    outputs:
      status: ${{ steps.check_artifact_exists.outputs.status }}
      cache_key: ${{ steps.get_cache_key.outputs.key }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - id: get_cache_key
        uses: ./.github/actions/get_cache_key
        with:
          extras: "2"
      - id: check_artifact_exists
        uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ steps.get_cache_key.outputs.key }}
  build-tensorflow-macOS:
    name: "Build TensorFlow (opt) for macOS"
    needs: tensorflow_opt-macOS
    runs-on: macos-10.15
    steps:
      - run: true
        if: needs.tensorflow_opt-macOS.outputs.status == 'found'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: ./.github/actions/select-xcode
        with:
          version: "12.1.1"
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: ./.github/actions/setup-tensorflow
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: ./.github/actions/build-tensorflow
        with:
          flavor: "--darwin-cpu"
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: ./.github/actions/package-tensorflow
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-macOS.outputs.cache_key }}
          path: ${{ github.workspace }}/artifacts/home.tar.xz
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
  build-lib_macOS:
    name: "Build libdeepspeech.so and deepspeech C++ binary"
    runs-on: macos-10.15
    needs: [ build-tensorflow-macOS, tensorflow_opt-macOS ]
    strategy:
      matrix:
        build-flavor: ["tf", "tflite"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-macOS.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-macOS.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-macOS.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-macOS.outputs.status == 'found'
      - run: |
          tar xkf ${{ github.workspace }}/home.tar.xz
          rm ${{ github.workspace }}/home.tar.xz
      - run: |
          git status
      - uses: ./.github/actions/select-xcode
        with:
          version: "12.1.1"
      - uses: ./.github/actions/host-build
        with:
          flavor: ${{ matrix.build-flavor }}
      - uses: ./.github/actions/package
      - uses: actions/upload-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.tar.xz"
          path: ${{ github.workspace }}/artifacts/native_client.tar.xz
      - uses: actions/upload-artifact@v2
        with:
          name: "libdeepspeech.${{ matrix.build-flavor }}.zip"
          path: ${{ github.workspace }}/artifacts/libdeepspeech.zip
  build-python-macOS:
    name: "Build python bindings for macOS"
    runs-on: macos-10.15
    needs: [ build-lib_macOS, swig_macOS ]
    strategy:
      matrix:
        build-flavor: ["tf", "tflite"]
        python-version: [3.6.8, 3.7.9, 3.8.8, 3.9.2]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_macOS"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: ./.github/actions/install-python-upstream
        with:
          version: ${{ matrix.python-version }}
      # GitHub packaged version are limited to macOS deployment target 10.14
      #- uses: actions/setup-python@v2
      #  with:
      #    python-version: ${{ matrix.python-version }}
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: ${{ matrix.python-version }}
      - uses: ./.github/actions/python-build
        with:
          build_flavor: ${{ matrix.build-flavor }}
          numpy_build: "${{ steps.get_numpy.outputs.build_version }}"
          numpy_dep: "${{ steps.get_numpy.outputs.dep_version }}"
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}-${{ matrix.python-version }}.whl"
          path: ${{ github.workspace }}/wheels/*.whl
  build-nodejs-macOS:
    name: "Build NodeJS and ElectronJS for macOS"
    runs-on: macos-10.15
    needs: [ build-lib_macOS, swig_macOS ]
    strategy:
      matrix:
        build-flavor: ["tf", "tflite"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_macOS"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - uses: ./.github/actions/node-build
        with:
          nodejs_versions: "10.0.0 11.0.0 12.7.0 13.0.0 14.0.0 15.0.0"
          electronjs_versions: "5.0.13 6.0.12 6.1.7 7.0.1 7.1.8 8.0.1 9.0.1 9.1.0 9.2.0 10.0.0 10.1.0 11.0.0 12.0.0"
      - uses: actions/upload-artifact@v2
        with:
          name: "nodewrapper-${{ matrix.build-flavor }}.tar.gz"
          path: ${{ github.workspace }}/native_client/javascript/wrapper.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}.tgz"
          path: ${{ github.workspace }}/native_client/javascript/deepspeech-*.tgz
  test-cpp-macOS:
    name: "Test C++ binary on macOS"
    runs-on: macos-10.15
    needs: [ build-lib_macOS, train-test-model ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        build-flavor: ["tf", "tflite"]
        models: ["test", "prod"]
        bitrate: ["8k", "16k"]
    env:
      TASKCLUSTER_TMP_DIR: ${{ github.workspace }}/tmp/
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.tar.xz"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
      - run: |
          cd ${{ env.TASKCLUSTER_TMP_DIR }}
          mkdir ds && cd ds && tar xf ../native_client.tar.xz
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
        if: matrix.models == 'test'
      - uses: ./.github/actions/run-tests
        with:
          runtime: "cpp"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-py-macOS:
    name: "Test Python bindings on macOS"
    runs-on: macos-10.15
    needs: [ build-python-macOS, train-test-model ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        python-version: [3.6.8, 3.7.9, 3.8.8, 3.9.2]
        build-flavor: ["tf", "tflite"]
        models: ["test", "prod"]
        bitrate: ["8k", "16k"]
    env:
      TASKCLUSTER_TMP_DIR: ${{ github.workspace }}/tmp/
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}-${{ matrix.python-version }}.whl"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
          pip3 install --only-binary :all: --upgrade ${{ env.TASKCLUSTER_TMP_DIR }}/deepspeech*.whl
      - uses: ./.github/actions/run-tests
        with:
          runtime: "python"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-nodejs-macOS:
    name: "Test NodeJS bindings on macOS"
    runs-on: macos-10.15
    needs: [ build-nodejs-macOS, train-test-model ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        # https://nodejs.org/en/about/releases/
        nodejs-version: [10, 12, 14, 15]
        build-flavor: ["tf", "tflite"]
        models: ["test"]
        bitrate: ["16k"]
    env:
      TASKCLUSTER_TMP_DIR: ${{ github.workspace }}/tmp/
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.nodejs-version }}
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}.tgz"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
          npm install ${{ env.TASKCLUSTER_TMP_DIR }}/deepspeech*.tgz
      - uses: ./.github/actions/run-tests
        with:
          runtime: "node"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-electronjs-macOS:
    name: "Test ElectronJS bindings on macOS"
    runs-on: macos-10.15
    needs: [ build-nodejs-macOS, train-test-model ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        electronjs-version: [5.0.13, 6.1.7, 7.1.8, 8.0.1, 9.2.0, 10.1.0, 11.0.0, 12.0.0]
        build-flavor: ["tf", "tflite"]
        models: ["test"]
        bitrate: ["16k"]
    env:
      TASKCLUSTER_TMP_DIR: ${{ github.workspace }}/tmp/
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}.tgz"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.TASKCLUSTER_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.TASKCLUSTER_TMP_DIR }}/
          npm install ${{ env.TASKCLUSTER_TMP_DIR }}/deepspeech*.tgz
      - run: |
          npm install electron@${{ matrix.electronjs-version }}
      - uses: ./.github/actions/run-tests
        with:
          runtime: "electronjs"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
        timeout-minutes: 5
