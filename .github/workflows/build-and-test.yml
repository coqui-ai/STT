name: "Builds and tests"
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
env:
  # Shared variables
  CI_TASK_DIR: ${{ github.workspace }}
  CI_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
  EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.8.0-8-g06c8fea58fd"
  STT_PROD_MODEL: https://github.com/coqui-ai/STT/releases/download/v0.10.0-alpha.7/output_graph.tflite
  BAZEL_CACHE: ${{ secrets.BAZEL_CACHE }}

  # macOS specific
  MACOSX_DEPLOYMENT_TARGET: "10.10"
  CI_NODE_MODULES_NTH: 1

  # Windows specific
  CI_MSYS_VERSION: MSYS_NT-10.0-17763
defaults:
  run:
    shell: bash
jobs:
  swig-macOS-arm64:
    name: "Mac|Build SWIG for arm64"
    runs-on: macos-10.15
    env:
      swig_hash: "90cdbee6a69d13b39d734083b9f91069533b0d7b"
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "swig/swig"
          ref: ${{ env.swig_hash }}
      - run: |
          mkdir -p build-static/
      - uses: actions/cache@v2
        id: swig-build-cache
        with:
          path: build-static/
          key: swig-${{ runner.os }}-arm64-${{ env.swig_hash }}
      - name: Select Xcode version and remove CLT
        run: |
          # Needed for targetting arm64 Macs
          sudo xcode-select --switch /Applications/Xcode_12.2.app/Contents/Developer
          # Workaround problems with mixing headers from Xcode and CommandLineTools by removing the latter
          sudo rm -rf /Library/Developer/CommandLineTools
      - run: |
          brew install automake
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          curl -sSL https://github.com/coqui-ai/STT/releases/download/v0.10.0-alpha.7/pcre-8.43.tar.gz > pcre-8.43.tar.gz
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - name: Build PCRE
        run: |
          CFLAGS="-target arm64-apple-darwin" \
          CXXFLAGS="-target arm64-apple-darwin" \
          LDFLAGS="-target arm64-apple-darwin" \
          ./Tools/pcre-build.sh \
            --host x86_64-apple-darwin \
            --target arm64-apple-darwin
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: failure()
      - name: Configure SWIG
        run: |
          sh autogen.sh
          CFLAGS="-target arm64-apple-darwin" \
          CXXFLAGS="-target arm64-apple-darwin" \
          LDFLAGS="-target arm64-apple-darwin" \
          ./configure \
            --host x86_64-apple-darwin \
            --target arm64-apple-darwin \
            --prefix=`pwd`/build-static/ \
            --program-prefix=ds-
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          make -j
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - run: |
          make install
        if: steps.swig-build-cache.outputs.cache-hit != 'true'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: ${{ github.workspace }}/build-static/
  build-ctc-decoder-macos-arm64:
    name: "Mac|Build CTC decoder Python package for arm64"
    needs: [swig-macOS-arm64]
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: ["3.10.1"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/install-python-upstream
        with:
          version: ${{ matrix.python-version }}
      - run: |
          python --version
          pip --version
      - uses: actions/download-artifact@v2
        with:
          name: "swig-macOS-arm64"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: ${{ matrix.python-version }}
      - name: Select Xcode version and remove CLT
        run: |
          # Needed for targetting arm64 Macs
          sudo xcode-select --switch /Applications/Xcode_12.2.app/Contents/Developer
          # Workaround problems with mixing headers from Xcode and CommandLineTools by removing the latter
          sudo rm -rf /Library/Developer/CommandLineTools
      - name: Make decoder package
        run: |
          NUMPY_BUILD_VERSION="${{ steps.get_numpy.outputs.build_version }}" \
          NUMPY_DEP_VERSION="${{ steps.get_numpy.outputs.dep_version }}" \
          make -C native_client/ctcdecode/ \
            TARGET=darwin-arm64 \
            NUM_PROCESSES=$(sysctl hw.ncpu |cut -d' ' -f2) \
            bindings
      - uses: actions/upload-artifact@v2
        with:
          name: "coqui_stt_ctcdecoder-macOS-arm64-${{ matrix.python-version }}.whl"
          path: ${{ github.workspace }}/native_client/ctcdecode/dist/*.whl
      - run: |
          make -C native_client/ctcdecode clean-keep-third-party
